-- Query 1: Retrieve top-selling products by department
SELECT
    d.name AS department_name,
    p.name AS product_name,
    SUM(sp.quantity) AS total_quantity_sold
FROM
    Sales_Products sp
JOIN Products p ON sp.product_id = p.id
JOIN Departments d ON p.supermarket_id = d.supermarket_id
GROUP BY
    d.name, p.name
ORDER BY
    d.name, total_quantity_sold DESC;

-- Query 2: Retrieve all products within a specific price range
SELECT
    id AS product_id,
    name AS product_name,
    price
FROM
    Products
WHERE
    price BETWEEN 5.00 AND 50.00
ORDER BY
    price ASC;

-- Query 3: Identify products nearing expiration across supermarkets
SELECT
    s.name AS supermarket_name,
    p.name AS product_name,
    p.expiration_date,
    p.quantity
FROM
    Products p
JOIN Supermarkets s ON p.supermarket_id = s.id
WHERE
    p.expiration_date <= CURRENT_DATE + INTERVAL '30 days'
ORDER BY
    p.expiration_date ASC;

-- Query 4: List all active promotions for a specific supermarket
SELECT
    p.name AS product_name,
    pr.type AS promotion_type,
    pr.price AS promotion_price,
    pr.starting_date,
    pr.ending_date
FROM
    Promotions pr
JOIN
    Products p ON pr.product_id = p.id
WHERE
    pr.is_active = TRUE
    AND pr.supermarket_id = 1
ORDER BY
    pr.ending_date DESC;

-- Query 5: Evaluate the impact of promotions on sales volume
SELECT
    pr.type AS promotion_type,
    p.name AS product_name,
    SUM(sp.quantity) AS total_quantity_sold,
    SUM(sp.unit_price * sp.quantity) AS total_revenue
FROM
    Sales_Products sp
JOIN Products p ON sp.product_id = p.id
JOIN Promotions pr ON p.id = pr.product_id
WHERE
    pr.is_active = TRUE
GROUP BY
    pr.type, p.name
ORDER BY
    total_quantity_sold DESC;

-- Query 6: Fetch customer purchase history for a specific customer
SELECT
    c.id AS customer_id,
    c.first_name,
    c.last_name,
    s.date_time AS purchase_date,
    p.name AS product_name,
    sp.quantity,
    sp.unit_price,
    sp.quantity * sp.unit_price AS total_price
FROM
    Customers c
JOIN
    Sales s ON c.id = s.customer_id
JOIN
    Sales_Products sp ON s.id = sp.sales_id
JOIN
    Products p ON sp.product_id = p.id
WHERE
    c.id = 2
ORDER BY
    s.date_time DESC;

-- Query 7: Analyze supplier performance by delivery consistency
SELECT
    su.name AS supplier_name,
    COUNT(DISTINCT p.id) AS total_products_supplied,
    COUNT(ss.supermarket_id) AS total_supermarkets_supplied
FROM
    Suppliers su
JOIN Trademarks t ON su.id = t.supplier_id
JOIN Products p ON t.id = p.trademark_id
JOIN Supermarket_Supplier ss ON su.id = ss.supplier_id
GROUP BY
    su.name
ORDER BY
    total_products_supplied DESC;

-- Query 8: Find products nearing expiration within a specific supermarket
SELECT
    id AS product_id,
    name AS product_name,
    expiration_date
FROM
    Products
WHERE
    expiration_date < NOW() + INTERVAL '7 days'
    AND supermarket_id = 1
ORDER BY
    expiration_date ASC;

-- Query 9: Check price history for a specific product
SELECT
    ph.date_time AS price_change_date,
    ph.price AS product_price,
    ph.is_active
FROM
    Price_History ph
WHERE
    ph.product_id = 10
ORDER BY
    ph.date_time DESC;

-- Query 10: Retrieve average rating for a specific supermarket
SELECT
    s.id AS supermarket_id,
    s.name AS supermarket_name,
    AVG(r.rate) AS average_rating
FROM
    Supermarkets s
JOIN
    Reviews r ON s.id = r.supermarket_id
WHERE
    s.id = 3
GROUP BY
    s.id, s.name;

-- Query 11: Calculate total revenue generated by a specific product
SELECT
    p.name AS product_name,
    SUM(sp.quantity * sp.unit_price) AS total_revenue
FROM
    Sales_Products sp
JOIN
    Products p ON sp.product_id = p.id
WHERE
    p.id = 15
GROUP BY
    p.name;

-- Query 12: Display departments and employee count within a supermarket
SELECT
    d.name AS department_name,
    COUNT(e.id) AS employee_count
FROM
    Departments d
JOIN
    Employees e ON d.id = e.department_id
WHERE
    d.supermarket_id = 1
GROUP BY
    d.name
ORDER BY
    employee_count DESC;

-- Query 13: Compare sales performance across supermarkets
SELECT
    s.name AS supermarket_name,
    SUM(sp.quantity * sp.unit_price) AS total_revenue,
    COUNT(DISTINCT sp.product_id) AS unique_products_sold
FROM
    Sales_Products sp
JOIN Products p ON sp.product_id = p.id
JOIN Supermarkets s ON p.supermarket_id = s.id
GROUP BY
    s.name
ORDER BY
    total_revenue DESC;

-- Query 14: Find all suppliers for a specific supermarket
SELECT
    s.id AS supplier_id,
    s.name AS supplier_name
FROM
    Suppliers s
JOIN
    Supermarket_Supplier ss ON s.id = ss.supplier_id
WHERE
    ss.supermarket_id = 1
ORDER BY
    s.name ASC;

-- Insert data into Supermarkets
INSERT INTO Supermarkets (name, address) VALUES
('Supermarket A', '123 Market St, Cityville'),
('Supermarket B', '456 Elm St, Townsville');

-- Insert data into Suppliers
INSERT INTO Suppliers (name) VALUES
('Supplier X'),
('Supplier Y'),
('Supplier Z');

-- Insert data into Categories
INSERT INTO Categories (name) VALUES
('Fruits'),
('Vegetables'),
('Dairy'),
('Beverages'),
('Snacks');

-- Insert data into Trademarks
INSERT INTO Trademarks (name, supplier_id) VALUES
('Trademark A', 1),
('Trademark B', 2),
('Trademark C', 3);

-- Insert data into Products
INSERT INTO Products (name, price, quantity, product_weight, unit_of_measure, expiration_date, created_at, updated_at, trademark_id, category_id, supermarket_id) VALUES
('Apple', 2.50, 100, 0.15, 'kg', '2025-12-31', NOW(), NOW(), 1, 1, 1),
('Banana', 1.80, 150, 0.12, 'kg', '2025-12-25', NOW(), NOW(), 1, 1, 1),
('Milk', 1.20, 200, 1.00, 'l', '2024-12-25', NOW(), NOW(), 2, 3, 1),
('Coke', 3.00, 120, 0.50, 'l', '2026-12-31', NOW(), NOW(), 3, 4, 2),
('Chips', 1.50, 180, 0.200, 'unit', '2025-11-30', NOW(), NOW(), 3, 5, 2);

-- Insert data into Price_History (for logging price changes)
INSERT INTO Price_History (price, date_time, product_id, is_active) VALUES
(2.50, '2024-12-10 10:00:00', 1, TRUE),
(1.80, '2024-12-11 10:00:00', 2, TRUE),
(1.20, '2024-12-12 10:00:00', 3, TRUE),
(3.00, '2024-12-13 10:00:00', 4, TRUE),
(1.50, '2024-12-14 10:00:00', 5, TRUE);

-- Insert data into Departments
INSERT INTO Departments (name, supermarket_id) VALUES
('Produce', 1),
('Beverages', 1),
('Snacks', 2);

-- Insert data into Job_Titles
INSERT INTO Job_Titles (name, department_id) VALUES
('Manager', 1),
('Cashier', 2),
('Stock Clerk', 3);

-- Insert data into Employees
INSERT INTO Employees (first_name, last_name, job_title_id, starting_date, ending_date, supermarket_id, department_id) VALUES
('John', 'Doe', 1, '2024-01-01', NULL, 1, 1),
('Jane', 'Smith', 2, '2024-02-01', NULL, 1, 2),
('Tom', 'Jones', 3, '2024-03-01', NULL, 2, 3);

-- Insert data into Customers
INSERT INTO Customers (first_name, last_name, username, email, phone) VALUES
('Alice', 'Johnson', 'alicej', 'alice@example.com', '1234567890'),
('Bob', 'Williams', 'bobw', 'bob@example.com', '0987654321');

-- Insert data into Supermarkets_Customers
INSERT INTO Supermarkets_Customers (supermarket_id, customer_id) VALUES
(1, 1),
(1, 2);

-- Insert data into Supermarket_Supplier
INSERT INTO Supermarket_Supplier (supermarket_id, supplier_id) VALUES
(1, 1),
(1, 2),
(2, 3);

-- Insert data into Promotions
INSERT INTO Promotions (type, price, starting_date, ending_date, supermarket_id, trademark_id, product_id, is_active) VALUES
('discount', 1.00, '2024-12-15 08:00:00', '2024-12-20 20:00:00', 1, 1, 1, TRUE),
('bundle', 3.50, '2024-12-16 08:00:00', '2024-12-30 20:00:00', 2, 3, 4, TRUE);

-- Insert data into Sales
INSERT INTO Sales (date_time, customer_id) VALUES
('2024-12-15 09:30:00', 1),
('2024-12-16 10:00:00', 2);

-- Insert data into Sales_Products
INSERT INTO Sales_Products (date_time, sales_id, product_id, quantity, unit_price) VALUES
('2024-12-15 09:30:00', 1, 1, 2, 2.50),
('2024-12-16 10:00:00', 2, 3, 3, 1.20);

-- Insert data into Reviews
INSERT INTO Reviews (date, rate, comment, customer_id, supermarket_id) VALUES
('2024-12-16 11:00:00', 5, 'Great service!', 1, 1),
('2024-12-17 12:00:00', 4, 'Good quality products, but a bit pricey.', 2, 2);

-- Insert data into Promotions_Products for active promotions
INSERT INTO Promotions (type, price, starting_date, ending_date, supermarket_id, trademark_id, product_id, is_active) VALUES
('discount', 2.00, '2024-12-18 10:00:00', '2024-12-20 10:00:00', 1, 1, 1, TRUE),
('bundle', 5.00, '2024-12-15 10:00:00', '2024-12-25 20:00:00', 2, 3, 4, TRUE);
